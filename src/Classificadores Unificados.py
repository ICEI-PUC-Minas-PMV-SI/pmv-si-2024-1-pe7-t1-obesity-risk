# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xi-mLPFgo3gM_54NDgAZ5-ZQZuSUpW01
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split, cross_val_score, learning_curve
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.impute import SimpleImputer
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix, ConfusionMatrixDisplay
from imblearn.over_sampling import SMOTE

# Carregar os dados
data = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/ObesityDataSet.csv')

# Tratar valores ausentes
imputer = SimpleImputer(strategy='most_frequent')
data = pd.DataFrame(imputer.fit_transform(data), columns=data.columns)

# Codificar variáveis categóricas
label_encoder = LabelEncoder()
categorical_cols = ['Gender', 'family_history_with_overweight', 'FAVC', 'CAEC', 'SMOKE', 'SCC', 'CALC', 'MTRANS']
for col in categorical_cols:
    data[col] = label_encoder.fit_transform(data[col])

# One-hot encoding para variáveis categóricas com mais de duas categorias
data = pd.get_dummies(data, columns=['MTRANS'])

# Codificar a variável alvo (NObeyesdad)
data['NObeyesdad'] = label_encoder.fit_transform(data['NObeyesdad'])

# Dividir os dados em variáveis independentes (X) e dependente (y)
X = data.drop('NObeyesdad', axis=1)
y = data['NObeyesdad']

# Padronizar os dados
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Primeira divisão: 70% treinamento, 30% restante
X_train, X_temp, y_train, y_temp = train_test_split(X_scaled, y, test_size=0.3, random_state=42)

# Segunda divisão: 50% do restante para validação, 50% para teste
X_val, X_test, y_val, y_test = train_test_split(X_temp, y_temp, test_size=0.5, random_state=42)

# Balanceamento de classes usando SMOTE
smote = SMOTE()
X_train_resampled, y_train_resampled = smote.fit_resample(X_train, y_train)

# Função para treinar, avaliar e plotar a matriz de confusão para um modelo
def train_evaluate_model(model, model_name):
    # Treinar o modelo
    model.fit(X_train_resampled, y_train_resampled)

    # Avaliar nos dados de validação
    y_pred_val = model.predict(X_val)
    accuracy_val = accuracy_score(y_val, y_pred_val)
    print(f"{model_name} - Validação - Accuracy:", accuracy_val)
    print(f"\n{model_name} - Validação - Classification Report:")
    print(classification_report(y_val, y_pred_val))

    # Avaliar nos dados de teste
    y_pred_test = model.predict(X_test)
    accuracy_test = accuracy_score(y_test, y_pred_test)
    print(f"{model_name} - Teste - Accuracy:", accuracy_test)
    print(f"\n{model_name} - Teste - Classification Report:")
    print(classification_report(y_test, y_pred_test))

    # Matriz de confusão para os dados de teste
    cm_test = confusion_matrix(y_test, y_pred_test)
    disp = ConfusionMatrixDisplay(confusion_matrix=cm_test, display_labels=label_encoder.classes_)
    disp.plot(cmap=plt.cm.Blues)
    plt.title(f"Matriz de Confusão - Teste ({model_name})")
    plt.show()

# Modelos
models = [
    (DecisionTreeClassifier(max_depth=10, random_state=42, criterion='gini'), "Decision Tree"),
    (RandomForestClassifier(max_depth=10, n_estimators=100, random_state=42, criterion='gini'), "Random Forest"),
    (LogisticRegression(max_iter=500), "Logistic Regression")
]

# Treinar e avaliar cada modelo
for model, model_name in models:
    train_evaluate_model(model, model_name)